---
title: "Analysis ERDF 2014-2020 cycle in Italy"
author: "Luisa M. Mimmi"
date: "`r format(Sys.time(), '%B %Y')`"
toc: true
format: # html
  html:
    highlight-style: a11y-dark
    code-tools: true
server: shiny
execute:
  echo: false
---

<!-- :::{.callout-note} -->
<!-- Note that there are five types of callouts, including:  -->
<!-- `note`, `tip`, `warning`, `caution`, and `important`. -->
<!-- ::: -->

```{r}
#| echo: false
pkg_list <- c(
  "tidyverse",   "reactable", "ggiraph", "here", "quarto",
  "rmarkdown",   "plotly", "shiny"
  )
#install.packages(pkg_list)
#install.packages("rmarkdown") 2 update

# load 
for (package in pkg_list) {
    args <- list(character.only = TRUE, warn.conflicts = FALSE, quietly = TRUE)
    if(!do.call(require, c(package, args))) {
        install.packages(package)
        do.call(require, c(package, args))
    }
}

```

## ERDF spending in Italy

This is a quick exploration of some EU structural funds aimed at verifying how much we have been able to disburse (given amounts planned and deemed eligible) for the 2014-2020 funding cycle.\
Specifically data are taken from the [**ESIF 2014-2020 Finance Implementation Details (99js-gm52)**](https://dev.socrata.com/foundry/cohesiondata.ec.europa.eu/99js-gm52) dataset, then I drill down to programs under the **ERDF (European Regional Development Fund)**.

The most important financial variables observed in euro (over time) are: <!-- see  https://dev.socrata.com/foundry/cohesiondata.ec.europa.eu/99js-gm52 -->

-   `total_amount` = Total decided amount (EU + National allocation), also referred to as *"Total Cost"*
-   `total_eligible_cost` = Total amount (EU + National) allocated to the projects (operations) selected, also referred to as *"total eligible cost"* reported by the national and regional programmes to the Commission.
-   `total_eligible_expenditure` = Total expenditure eligible for reimbursement, as reported by the beneficiary projects to the programmes. Also referred to as *"total eligible expenditure"*, it is reported by the national and regional programmes to the Commission.

Other qualifying variables are:

-   `cci` = *"Unique identifier"* of each operational programme.
-   `to_short` = Short name for the *"thematic objective"*. For example: "Research and Innovation" stands for "Strengthening research, technological development and innovation.
-   `priority` = Priority Axis: the investment pillars in the programme. Unfortunately, since there is no harmonised numbering or naming of Priority Axes, this variable is useless for comparison.
-   `category_of_region` = The three main categories of region are: *"less developed"*, *"transition"*, and *"more developed"*.

::: callout-note
Actually, the data are up to date (October 2022) and last reference date shown is **31-12-2021**, but I am not sure whether programs are now closed or still been implemented... (deadlines were extended due to Covid).
:::

<!-- ## ERDF by region category -->

<!-- ![ERDF by region category](fig/ERDF_eligVspent_reg_time_facet.png){#fig-plot1} -->

## ERDF: percent amount spent by theme & by program (table)

Collapsible table made following [this example](https://glin.github.io/reactable/articles/building-twitter-followers.html)

::: callout-tip
Note that Id of Programs can be used to learn more information about them at this web [link](https://ec.europa.eu/regional_policy/en/atlas/programmes/), inserting the ***cci*** code in the "Keyword" search box
:::

```{r}
#| echo: false
#| code-fold: true
#| label: tbl-table1
#| tbl-cap: "ERDF by theme category INTERACTIVE"

library(reactable)
t_react2 <- readRDS(file = "fig/t_react2.Rds") 
t_react2 
```

<!-- https://ec.europa.eu/regional_policy/en/faq/about_open_data/#13 -->

## ERDF by theme category (interactive)

```{r}
#| echo: false
#| label: fig-plot2
#| fig-cap: "ERDF by theme category"
#| code-fold: true
#| context: server


library(shiny)
library(plotly)

ESIF_nest_theme <- readRDS(  file = paste0("./data/out_data/ESIF_nest_theme.Rds"))

ui_t <- shinyUI(
    fluidPage(
        selectInput("selectPlot", "Select THEME:", c(
            "Competitiveness of SMEs",
            "Sustainable & Quality Employment",
            "Educational & Vocational Training",
            "Social Inclusion",
            
            "Research & Innovation",
            "Network Infrastructures in Transport and Energy",
            
            "Low-Carbon Economy",
            "Environment Protection & Resource Efficiency",
            "Climate Change Adaptation & Risk Prevention",
            
            "Information & Communication Technologies",
            "Technical Assistance",
            "Efficient Public Administration"), 
                    selected = "Planned | Eligible | Committed funds"),
        plotlyOutput("plot")
    )
)

 # data.table::uniqueN(ESIF_nest_theme$to_short )
 # ESIF_nest_theme$to_short[[1]]

server_t <- shinyServer(function(input,output,session){   

    data <- eventReactive(input$selectPlot,{
        switch(input$selectPlot,
               "Climate Change Adaptation & Risk Prevention" = ESIF_nest_theme$plot[[1]],#gg1,
               "Competitiveness of SMEs" = ESIF_nest_theme$plot[[2]],#gg1,
               "Educational & Vocational Training" = ESIF_nest_theme$plot[[3]],#gg1,
               "Efficient Public Administration" = ESIF_nest_theme$plot[[4]],#gg1,
               "Environment Protection & Resource Efficiency" = ESIF_nest_theme$plot[[5]],#gg1,
               "Information & Communication Technologies" = ESIF_nest_theme$plot[[6]],#gg1,
               "Low-Carbon Economy" = ESIF_nest_theme$plot[[7]],#gg1,
               "Network Infrastructures in Transport and Energy" = ESIF_nest_theme$plot[[8]],#gg1,
               "Research & Innovation" = ESIF_nest_theme$plot[[9]],#gg1,
               "Social Inclusion" = ESIF_nest_theme$plot[[10]],#gg1,
               "Sustainable & Quality Employment" = ESIF_nest_theme$plot[[11]],#gg1,
               "Technical Assistance" = ESIF_nest_theme$plot[[12]],#gg1,
               )
    })

    output$plot <- renderPlotly({
        data()
    })
})
 

# Run the application 
shinyApp(ui = ui_t, server = server_t)
```


<!-- knitr::include_graphics(here::here("fig", "ERDF_eligVspent_theme_time_facet.png")) -->

<!-- ![ERDF by theme category](fig/ERDF_eligVspent_theme_time_facet.png){#fig-plot2} -->

::: callout-note
In some cases (e.g. @fig-plot2, in section **Research and Innovation**) the amount decided (`total_eligible_cost)` exceeds the `total_amount` programmed. Why? This happens generally in the last years of a programme period. They do this in order to avoid the risks 1) that some of the decided / selected projects fail to materialise or 2) that irregularities occur over the programme life time which lead to the withdrawal of support to those projects.
:::

<!-- ## Plot 3 ( = Plot 2, but interactive) -->

```{r}
#| echo: false
#| eval: false
#| label: fig-plot3
#| fig-cap: "ERDF by theme category INTERACTIVE"
#| code-fold: true
 
library(ggiraph)
plot1_int <- readRDS(file = "fig/p2_int.Rds")

girafe(
  ggobj = plot1_int#,
 # width_svg = 6,
 # height_svg = 3
)

# ?? for some reasons it messe up the theme
```

```{r}
library(purrr)

ESIF_nest_theme <- readRDS("./data/out_data/ESIF_nest_theme.Rds")

ESIF_nest_theme %>%
    walk2(# trigger side effect from pairs  --> print
        .x = .$plot,
        .y = .$to_short,
        .f = ~ print(.x)
    )
```

# TBC...

# Reference

Using some tools for the first time, I followed this tutorials/examples:

-   `Quarto` (see presentation [here](https://rstudio-conf-2022.github.io/get-started-quarto/materials/07-plots-tables.html#/block-layout-arbitrary-content))
-   R package `reactable` (see examples [here](https://glin.github.io/reactable/articles/building-twitter-followers.html#finishing-touches))

The code written (in R) to retrieve and clean the data can be found at this [Github repo](https://github.com/Lulliter/plan2implem)
